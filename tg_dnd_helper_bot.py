import telebot
import requests
from bs4 import BeautifulSoup
from telebot import types
import random

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç BotFather
API_TOKEN = '7558556068:AAHG_o2t_EbV_Pw1xpb53bX03FSQLFUyHuU'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(API_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞ –ë–µ—Å—Ç–∏–∞—Ä–∏–π
def search_bestiary(query):
    url = f'https://dnd.su/bestiary/?search={query}'  # –ü–æ–ª–Ω—ã–π URL –¥–ª—è –ø–æ–∏—Å–∫–∞
    try:
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        links = []
        for item in soup.find_all('div', class_='result-item'):
            link = item.find('a')['href']
            if not link.startswith('http'):
                link = f'https://dnd.su{link}'
            links.append(link)

        return links if links else None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    except Exception as e:
        return [f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞ –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è
def search_spells(query):
    url = f'https://dnd.su/spells/?search={query}'  # –ü–æ–ª–Ω—ã–π URL –¥–ª—è –ø–æ–∏—Å–∫–∞
    try:
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        links = []
        for item in soup.find_all('div', class_='result-item'):
            link = item.find('a')['href']
            if not link.startswith('http'):
                link = f'https://dnd.su{link}'
            links.append(link)

        return links if links else None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    except Exception as e:
        return [f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ "–ü–æ–∏—Å–∫" –∏ "–ö–∏–Ω—É—Ç—å –¥–∞–π—Å—ã"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ "–ü–æ–∏—Å–∫" –∏ "–ö–∏–Ω—É—Ç—å –¥–∞–π—Å—ã"
    markup = types.InlineKeyboardMarkup()
    button_search = types.InlineKeyboardButton("–ü–æ–∏—Å–∫", callback_data="search")
    button_roll_dice = types.InlineKeyboardButton("–ö–∏–Ω—É—Ç—å –¥–∞–π—Å—ã", callback_data="roll_dice")
    markup.add(button_search, button_roll_dice)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –î–Ω–î, —Ä–∞–¥ —Å—Ç–∞—Ä–∞—Ç—å—Å—è —Ä–∞–¥–∏ –≤–∞—Å, –ø—É—Ç–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫"
@bot.callback_query_handler(func=lambda call: call.data == "search")
def callback_search(call):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ "–ë–µ—Å—Ç–∏–∞—Ä–∏–π" –∏ "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è"
    markup = types.InlineKeyboardMarkup()
    button_bestiary = types.InlineKeyboardButton("–ë–µ—Å—Ç–∏–∞—Ä–∏–π", callback_data="bestiary")
    button_spells = types.InlineKeyboardButton("–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è", callback_data="spells")
    markup.add(button_bestiary, button_spells)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(call.message.chat.id, "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –Ω–∞–π—Ç–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ö–∏–Ω—É—Ç—å –¥–∞–π—Å—ã"
@bot.callback_query_handler(func=lambda call: call.data == "roll_dice")
def callback_roll_dice(call):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–∞–π—Å–æ–≤
    markup = types.InlineKeyboardMarkup()
    button_d4 = types.InlineKeyboardButton("1d4", callback_data="roll_1d4")
    button_d6 = types.InlineKeyboardButton("1d6", callback_data="roll_1d6")
    button_d8 = types.InlineKeyboardButton("1d8", callback_data="roll_1d8")
    button_d10 = types.InlineKeyboardButton("1d10", callback_data="roll_1d10")
    button_d12 = types.InlineKeyboardButton("1d12", callback_data="roll_1d12")
    button_d20 = types.InlineKeyboardButton("1d20", callback_data="roll_1d20")
    
    markup.add(button_d4, button_d6, button_d8, button_d10, button_d12, button_d20)

    bot.send_message(call.message.chat.id, "–ö–∞–∫–æ–π –¥–∞–π—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–∏–Ω—É—Ç—å?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–∞–π—Å–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("roll_"))
def roll_dice(call):
    dice_type = call.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–∞–π—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1d4, 1d6 –∏ —Ç.–¥.)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–π—Å–∞
    if dice_type == "1d4":
        result = random.randint(1, 4)
    elif dice_type == "1d6":
        result = random.randint(1, 6)
    elif dice_type == "1d8":
        result = random.randint(1, 8)
    elif dice_type == "1d10":
        result = random.randint(1, 10)
    elif dice_type == "1d12":
        result = random.randint(1, 12)
    elif dice_type == "1d20":
        result = random.randint(1, 20)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    bot.send_message(call.message.chat.id, f"–í—ã –±—Ä–æ—Å–∏–ª–∏ {dice_type}! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    if result == 20:
        bot.send_message(call.message.chat.id, "üéâ")
    elif result == 1:
        bot.send_message(call.message.chat.id, "üíÄ")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
    user_states[call.message.chat.id] = None
    show_dice_options(call.message.chat.id)

def show_dice_options(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞–π—Å–∞."""
    markup = types.InlineKeyboardMarkup()
    button_d4 = types.InlineKeyboardButton("1d4", callback_data="roll_1d4")
    button_d6 = types.InlineKeyboardButton("1d6", callback_data="roll_1d6")
    button_d8 = types.InlineKeyboardButton("1d8", callback_data="roll_1d8")
    button_d10 = types.InlineKeyboardButton("1d10", callback_data="roll_1d10")
    button_d12 = types.InlineKeyboardButton("1d12", callback_data="roll_1d12")
    button_d20 = types.InlineKeyboardButton("1d20", callback_data="roll_1d20")
    
    markup.add(button_d4, button_d6, button_d8, button_d10, button_d12, button_d20)

    bot.send_message(chat_id, "–ö–∞–∫–æ–π –¥–∞–π—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–∏–Ω—É—Ç—å?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ "–ë–µ—Å—Ç–∏–∞—Ä–∏–π" –∏ "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è"
@bot.callback_query_handler(func=lambda call: call.data in ["bestiary", "spells"])
def callback_query(call):
    if call.data == "bestiary":
        user_states[call.message.chat.id] = 'bestiary'  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")
    
    elif call.data == "spells":
        user_states[call.message.chat.id] = 'spells'  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def search(message):
    query = message.text.strip()
    formatted_query = query.replace(" ", "+")  # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –∑–Ω–∞–∫ "+"

    state = user_states.get(message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if state == 'bestiary':
        search_url = f'https://dnd.su/bestiary/?search={formatted_query}'  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫
        results = search_bestiary(formatted_query)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        
        bot.send_message(message.chat.id, f"[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã]({search_url})", parse_mode='Markdown')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫
        if results:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            bot.send_message(message.chat.id, "\n".join(results))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
        user_states[message.chat.id] = None
        return show_options(message.chat.id)

    elif state == 'spells':
        search_url = f'https://dnd.su/spells/?search={formatted_query}'  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫
        results = search_spells(formatted_query)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        
        bot.send_message(message.chat.id, f"[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã]({search_url})", parse_mode='Markdown')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫
        if results:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            bot.send_message(message.chat.id, "\n".join(results))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
        user_states[message.chat.id] = None
        return show_options(message.chat.id)

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –æ–ø—Ü–∏—é)
    bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫' –¥–ª—è –Ω–∞—á–∞–ª–∞.")

def show_options(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏."""
    markup = types.InlineKeyboardMarkup()
    button_bestiary = types.InlineKeyboardButton("–ë–µ—Å—Ç–∏–∞—Ä–∏–π", callback_data="bestiary")
    button_spells = types.InlineKeyboardButton("–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è", callback_data="spells")
    markup.add(button_bestiary, button_spells)
    
    bot.send_message(chat_id, "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –Ω–∞–π—Ç–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)
